#!/usr/bin/awk -f

# check if year is leap year
function isleap(y) {
	return (!(y % 4) && (y % 100) || !(y % 400))
}

# get week of month
function getfmweek(d, w) {
	return 1 + int((d - w + DAYSPERWEEK) / DAYSPERWEEK)
}

# get week of month from last to first (1 last week, 2 second to last week, etc)
function getlmweek(y, d, w, p,    n) {
	n = daytab[isleap(y), m] + 1
	return getfmweek(n, w - d + n + MAXDAYS) - p + 1
}

# set today array
function settoday(    time) {
	time = systime();
	today[YEAR]   = strftime("%Y", time) + 0
	today[MONTH]  = strftime("%m", time) + 0
	today[MDAY]   = strftime("%d", time) + 0
	today[WDAY]   = strftime("%w", time) + 0
	today[FMWEEK] = getfmweek(today[MDAY], today[WDAY])
	today[LMWEEK] = getlmweek(today[YEAR], today[MDAY], today[WDAY], today[FMWEEK])
}

# get date pattern
function getpattern(    s, n, patt) {
	if (npatt++ > 0) {                                              # remove leading comma
		if (match($0, /^,/)) {
			$0 = substr($0, RLENGTH + 1)
		} else {
			return ""
		}
	}
	sub(/^[ \t]+/, "")
	if (match($0, /^[0-9]+[\/.-]/)) {
		# got numeric year or month
		patt[MONTH] = substr($0, 1, RLENGTH - 1) + 0
		$0 = substr($0, RLENGTH + 1)
		if (match($0, /^[0-9]+[\/.-]/)) {
			# got numeric month after numeric year
			patt[YEAR] = patt[MONTH]
			patt[MONTH] = substr($0, 1, RLENGTH - 1) + 0
			$0 = substr($0, RLENGTH + 1)
		} else if (match($0, /^[A-Za-z]+[\/.-]/) && (n = inmonths[tolower(substr($0, 1, 3))])) {
		        # got month name after numeric year
			patt[YEAR] = patt[MONTH]
			patt[MONTH] = n
			$0 = substr($0, RLENGTH + 1)
		}
	} else if (match($0, /^[A-Za-z]+[\/.-]/) && (n = inmonths[tolower(substr($0, 1, 3))])) {
		# got month name
		patt[MONTH] = n
		$0 = substr($0, RLENGTH + 1)
	}
	if (match($0, /^[0-9]+/)) {
		# got numeric month day
		patt[MDAY] = substr($0, 1, RLENGTH) + 0
		$0 = substr($0, RLENGTH + 1)
	}
	if (match($0, /^[A-Za-z]+/) && (n = indays[tolower(substr($0, 1, 3))])) {
		# got weekday name
		patt[WDAY] = n
		$0 = substr($0, RLENGTH + 1)
	}
	if (patt[MDAY] == 0 && patt[WDAY] == 0)
		return;
	if (match($0, /^[+-]?[0-9]+/)) {
		# got numeric week of the month
		if ((n = substr($0, 1, RLENGTH) + 0) < 0)
			patt[LMWEEK] = -n
		else if (n > 0)
			patt[FMWEEK] = n
		$0 = substr($0, RLENGTH + 1)
	}
	sub(/^[\t ]+/, "")
	return (patt[YEAR]   != 0 ? sprintf("%d-",   patt[YEAR])               : ".*-") \
	       (patt[MONTH]  != 0 ? sprintf("%02d-", patt[MONTH])              : "..-") \
	       (patt[MDAY]   != 0 ? sprintf("%02d-", patt[MDAY])               : "..-") \
	       (patt[WDAY]   != 0 ? sprintf("%1d-",  patt[WDAY] % DAYSPERWEEK) : ".-") \
	       (patt[FMWEEK] != 0 ? sprintf("%1d-",  patt[FMWEEK])             : ".-") \
	       (patt[LMWEEK] != 0 ? sprintf("%1d",   patt[LMWEEK])             : ".")
}

# increment date for today
function incrdate() {
	today[WDAY] = (today[WDAY] + 1) % DAYSPERWEEK;
	if (today[WDAY] == 0) {
		today[FMWEEK]++;
		today[LMWEEK]--;
	}
	if (today[MDAY] < daytab[isleap(today[YEAR]), today[MONTH]]) {
		today[MDAY]++
	} else if (today[MONTH] < 12) {
		today[MONTH]++;
		today[MDAY] = 1;
		today[FMWEEK] = 1;
		today[LMWEEK] = getlmweek(today[YEAR], today[MDAY], today[WDAY], today[FMWEEK])
	} else {
		today[YEAR]++;
		today[MONTH] = 1;
		today[MDAY] = 1;
		today[FMWEEK] = 1;
		today[LMWEEK] = getlmweek(today[YEAR], today[MDAY], today[WDAY], today[FMWEEK])
	}
}

BEGIN {
	NDAYS = 7

	daytab[0, 1] =  daytab[1, 1] =  31
	daytab[0, 2] =                  28
	daytab[1, 2] =                  29
	daytab[0, 3] =  daytab[1, 3] =  31
	daytab[0, 4] =  daytab[1, 4] =  30
	daytab[0, 5] =  daytab[1, 5] =  31
	daytab[0, 6] =  daytab[1, 6] =  30
	daytab[0, 7] =  daytab[1, 7] =  31
	daytab[0, 8] =  daytab[1, 8] =  31
	daytab[0, 9] =  daytab[1, 9] =  30
	daytab[0, 10] = daytab[1, 10] = 31
	daytab[0, 11] = daytab[1, 11] = 30
	daytab[0, 12] = daytab[1, 12] = 31

	MONTHSPERYEAR = 12
	inmonths["jan"] = 1
	inmonths["feb"] = 2
	inmonths["mar"] = 3
	inmonths["apr"] = 4
	inmonths["may"] = 5
	inmonths["jun"] = 6
	inmonths["jul"] = 7
	inmonths["aug"] = 8
	inmonths["sep"] = 9
	inmonths["oct"] = 10
	inmonths["nov"] = 11
	inmonths["dec"] = 12
	outmonths[1]  = "January"
	outmonths[2]  = "February"
	outmonths[3]  = "March"
	outmonths[4]  = "April"
	outmonths[5]  = "May"
	outmonths[6]  = "June"
	outmonths[7]  = "July"
	outmonths[8]  = "August"
	outmonths[9]  = "September"
	outmonths[10] = "October"
	outmonths[11] = "November"
	outmonths[12] = "December"

	MAXDAYS = 35
	DAYSPERWEEK = 7
	indays["mon"] = 1
	indays["tue"] = 2
	indays["wed"] = 3
	indays["thu"] = 4
	indays["fri"] = 5
	indays["sat"] = 6
	indays["sun"] = 7
	outdays[1] = "Monday"
	outdays[2] = "Tuesday"
	outdays[3] = "Wednesday"
	outdays[4] = "Thursday"
	outdays[5] = "Friday"
	outdays[6] = "Saturday"
	outdays[0] = "Sunday"

	# subscripts for the events array
	NAME = 1
	FILE = 2
	PATT = 3

	# subscripts for the time and patt arrays
	YEAR   = 1
	MONTH  = 2
	MDAY   = 3              # day of the month
	WDAY   = 4              # day of the week
	FMWEEK = 5              # week of the month, from first to last
	LMWEEK = 6              # week of the month, from last to first

	settoday()
}

FNR == 1 {
	nfiles++
}

NF == 0 || substr($1, 1, 1) == "#" {
	next
}

{
	patt = ""
	npatt = 0
	while ((s = getpattern()))
		patt = patt (patt ? "|" : "") s
	if (patt) {
		nevents++
		events[nevents, PATT] = patt
		events[nevents, FILE] = nfiles
		events[nevents, NAME] = $0
	}
}

END {
	for (i = 1; i <= NDAYS; i++) {
		date = sprintf("%d-%02d-%02d-%1d-%1d-%1d", today[YEAR], today[MONTH], today[MDAY], today[WDAY], today[FMWEEK], today[LMWEEK])
		printf "%-10s %02d %s %d\n", outdays[today[WDAY]], today[MDAY], outmonths[today[MONTH]], today[YEAR]
		for (j = 1; j <= nevents; j++) {
			if (date ~ events[j, PATT]) {
				printf "\t"
				if (ARGC > 2)
					printf "%s: ", ARGV[events[j, FILE]]
				printf "%s\n", events[j, NAME]
			}
		}
		incrdate()
	}
}
